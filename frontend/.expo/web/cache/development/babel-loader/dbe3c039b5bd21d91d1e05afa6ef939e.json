{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/andrewzhang/Desktop/berkeley/fintech/sports-betting/frontend/node_modules/react-native-google-signin/src/GoogleSigninButton.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { requireNativeComponent } from \"react-native-web/dist/index\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport DeviceEventEmitter from \"react-native-web/dist/exports/DeviceEventEmitter\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nvar RNGoogleSignin = NativeModules.RNGoogleSignin;\nvar RNGoogleSigninButton = requireNativeComponent('RNGoogleSigninButton', null);\nexport var GoogleSigninButton = function (_PureComponent) {\n  _inherits(GoogleSigninButton, _PureComponent);\n\n  var _super = _createSuper(GoogleSigninButton);\n\n  function GoogleSigninButton() {\n    _classCallCheck(this, GoogleSigninButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(GoogleSigninButton, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this = this;\n\n      if (Platform.OS === 'android') {\n        this._clickListener = DeviceEventEmitter.addListener('RNGoogleSigninButtonClicked', function () {\n          _this.props.onPress && _this.props.onPress();\n        });\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._clickListener && this._clickListener.remove();\n    }\n  }, {\n    key: \"getRecommendedSize\",\n    value: function getRecommendedSize() {\n      switch (this.props.size) {\n        case RNGoogleSignin.BUTTON_SIZE_ICON:\n          return styles.iconSize;\n\n        case RNGoogleSignin.BUTTON_SIZE_WIDE:\n          return styles.wideSize;\n\n        default:\n          return styles.standardSize;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          props = _objectWithoutProperties(_this$props, [\"style\"]);\n\n      return React.createElement(RNGoogleSigninButton, _extends({\n        style: [this.getRecommendedSize(), style]\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return GoogleSigninButton;\n}(PureComponent);\nGoogleSigninButton.propTypes = _objectSpread(_objectSpread({}, ViewPropTypes), {}, {\n  size: PropTypes.number,\n  color: PropTypes.number,\n  disabled: PropTypes.bool,\n  onPress: PropTypes.func.isRequired\n});\nGoogleSigninButton.defaultProps = {\n  size: RNGoogleSignin.BUTTON_SIZE_STANDARD\n};\nvar styles = StyleSheet.create({\n  iconSize: {\n    width: 48,\n    height: 48\n  },\n  standardSize: {\n    width: 212,\n    height: 48\n  },\n  wideSize: {\n    width: 312,\n    height: 48\n  }\n});\nGoogleSigninButton.Size = {\n  Icon: RNGoogleSignin.BUTTON_SIZE_ICON,\n  Standard: RNGoogleSignin.BUTTON_SIZE_STANDARD,\n  Wide: RNGoogleSignin.BUTTON_SIZE_WIDE\n};\nGoogleSigninButton.Color = {\n  Auto: RNGoogleSignin.BUTTON_COLOR_AUTO,\n  Light: RNGoogleSignin.BUTTON_COLOR_LIGHT,\n  Dark: RNGoogleSignin.BUTTON_COLOR_DARK\n};","map":{"version":3,"sources":["/Users/andrewzhang/Desktop/berkeley/fintech/sports-betting/frontend/node_modules/react-native-google-signin/src/GoogleSigninButton.js"],"names":["React","PureComponent","PropTypes","requireNativeComponent","ViewPropTypes","RNGoogleSignin","NativeModules","RNGoogleSigninButton","GoogleSigninButton","Platform","OS","_clickListener","DeviceEventEmitter","addListener","props","onPress","remove","size","BUTTON_SIZE_ICON","styles","iconSize","BUTTON_SIZE_WIDE","wideSize","standardSize","style","getRecommendedSize","propTypes","number","color","disabled","bool","func","isRequired","defaultProps","BUTTON_SIZE_STANDARD","StyleSheet","create","width","height","Size","Icon","Standard","Wide","Color","Auto","BUTTON_COLOR_AUTO","Light","BUTTON_COLOR_LIGHT","Dark","BUTTON_COLOR_DARK"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;SAIEC,sB;SACAC,a;;;;IAMMC,c,GAAmBC,a,CAAnBD,c;AACR,IAAME,oBAAoB,GAAGJ,sBAAsB,CAAC,sBAAD,EAAyB,IAAzB,CAAnD;AAEA,WAAaK,kBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAaE,6BAAoB;AAAA;;AAClB,UAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,aAAKC,cAAL,GAAsBC,kBAAkB,CAACC,WAAnB,CAA+B,6BAA/B,EAA8D,YAAM;AACxF,UAAA,KAAI,CAACC,KAAL,CAAWC,OAAX,IAAsB,KAAI,CAACD,KAAL,CAAWC,OAAX,EAAtB;AACD,SAFqB,CAAtB;AAGD;AACF;AAnBH;AAAA;AAAA,WAqBE,gCAAuB;AACrB,WAAKJ,cAAL,IAAuB,KAAKA,cAAL,CAAoBK,MAApB,EAAvB;AACD;AAvBH;AAAA;AAAA,WAyBE,8BAAqB;AACnB,cAAQ,KAAKF,KAAL,CAAWG,IAAnB;AACE,aAAKZ,cAAc,CAACa,gBAApB;AACE,iBAAOC,MAAM,CAACC,QAAd;;AACF,aAAKf,cAAc,CAACgB,gBAApB;AACE,iBAAOF,MAAM,CAACG,QAAd;;AACF;AACE,iBAAOH,MAAM,CAACI,YAAd;AANJ;AAQD;AAlCH;AAAA;AAAA,WAoCE,kBAAS;AAAA,wBACqB,KAAKT,KAD1B;AAAA,UACCU,KADD,eACCA,KADD;AAAA,UACWV,KADX;;AAGP,aAAO,oBAAC,oBAAD;AAAsB,QAAA,KAAK,EAAE,CAAC,KAAKW,kBAAL,EAAD,EAA4BD,KAA5B;AAA7B,SAAqEV,KAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD;AAxCH;;AAAA;AAAA,EAAwCb,aAAxC;AAAaO,kB,CACJkB,S,mCACFtB,a;AACHa,EAAAA,IAAI,EAAEf,SAAS,CAACyB,M;AAChBC,EAAAA,KAAK,EAAE1B,SAAS,CAACyB,M;AACjBE,EAAAA,QAAQ,EAAE3B,SAAS,CAAC4B,I;AACpBf,EAAAA,OAAO,EAAEb,SAAS,CAAC6B,IAAV,CAAeC;;AANfxB,kB,CASJyB,Y,GAAe;AACpBhB,EAAAA,IAAI,EAAEZ,cAAc,CAAC6B;AADD,C;AAkCxB,IAAMf,MAAM,GAAGgB,UAAU,CAACC,MAAX,CAAkB;AAC/BhB,EAAAA,QAAQ,EAAE;AACRiB,IAAAA,KAAK,EAAE,EADC;AAERC,IAAAA,MAAM,EAAE;AAFA,GADqB;AAK/Bf,EAAAA,YAAY,EAAE;AAAEc,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB,GALiB;AAM/BhB,EAAAA,QAAQ,EAAE;AAAEe,IAAAA,KAAK,EAAE,GAAT;AAAcC,IAAAA,MAAM,EAAE;AAAtB;AANqB,CAAlB,CAAf;AASA9B,kBAAkB,CAAC+B,IAAnB,GAA0B;AACxBC,EAAAA,IAAI,EAAEnC,cAAc,CAACa,gBADG;AAExBuB,EAAAA,QAAQ,EAAEpC,cAAc,CAAC6B,oBAFD;AAGxBQ,EAAAA,IAAI,EAAErC,cAAc,CAACgB;AAHG,CAA1B;AAMAb,kBAAkB,CAACmC,KAAnB,GAA2B;AACzBC,EAAAA,IAAI,EAAEvC,cAAc,CAACwC,iBADI;AAEzBC,EAAAA,KAAK,EAAEzC,cAAc,CAAC0C,kBAFG;AAGzBC,EAAAA,IAAI,EAAE3C,cAAc,CAAC4C;AAHI,CAA3B","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n  NativeModules,\n  requireNativeComponent,\n  ViewPropTypes,\n  Platform,\n  DeviceEventEmitter,\n  StyleSheet,\n} from 'react-native';\n\nconst { RNGoogleSignin } = NativeModules;\nconst RNGoogleSigninButton = requireNativeComponent('RNGoogleSigninButton', null);\n\nexport class GoogleSigninButton extends PureComponent {\n  static propTypes = {\n    ...ViewPropTypes,\n    size: PropTypes.number,\n    color: PropTypes.number,\n    disabled: PropTypes.bool,\n    onPress: PropTypes.func.isRequired,\n  };\n\n  static defaultProps = {\n    size: RNGoogleSignin.BUTTON_SIZE_STANDARD,\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'android') {\n      this._clickListener = DeviceEventEmitter.addListener('RNGoogleSigninButtonClicked', () => {\n        this.props.onPress && this.props.onPress();\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this._clickListener && this._clickListener.remove();\n  }\n\n  getRecommendedSize() {\n    switch (this.props.size) {\n      case RNGoogleSignin.BUTTON_SIZE_ICON:\n        return styles.iconSize;\n      case RNGoogleSignin.BUTTON_SIZE_WIDE:\n        return styles.wideSize;\n      default:\n        return styles.standardSize;\n    }\n  }\n\n  render() {\n    const { style, ...props } = this.props;\n\n    return <RNGoogleSigninButton style={[this.getRecommendedSize(), style]} {...props} />;\n  }\n}\n\nconst styles = StyleSheet.create({\n  iconSize: {\n    width: 48,\n    height: 48,\n  },\n  standardSize: { width: 212, height: 48 },\n  wideSize: { width: 312, height: 48 },\n});\n\nGoogleSigninButton.Size = {\n  Icon: RNGoogleSignin.BUTTON_SIZE_ICON,\n  Standard: RNGoogleSignin.BUTTON_SIZE_STANDARD,\n  Wide: RNGoogleSignin.BUTTON_SIZE_WIDE,\n};\n\nGoogleSigninButton.Color = {\n  Auto: RNGoogleSignin.BUTTON_COLOR_AUTO,\n  Light: RNGoogleSignin.BUTTON_COLOR_LIGHT,\n  Dark: RNGoogleSignin.BUTTON_COLOR_DARK,\n};\n"]},"metadata":{},"sourceType":"module"}