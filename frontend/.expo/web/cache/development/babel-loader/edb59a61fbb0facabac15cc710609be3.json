{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewzhang/Desktop/berkeley/fintech/sports-betting/frontend/src/screens/HomeScreen/HomeScreen.js\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport styles from \"./styles\";\nimport { firebase } from \"../../firebase/config\";\nexport default function HomeScreen(props) {\n  var _this = this;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      entityText = _useState2[0],\n      setEntityText = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      entities = _useState4[0],\n      setEntities = _useState4[1];\n\n  var entityRef = firebase.firestore().collection('entities');\n  var userID = props.extraData.id;\n  useEffect(function () {\n    entityRef.where(\"authorID\", \"==\", userID).orderBy('createdAt', 'desc').onSnapshot(function (querySnapshot) {\n      var newEntities = [];\n      querySnapshot.forEach(function (doc) {\n        var entity = doc.data();\n        entity.id = doc.id;\n        newEntities.push(entity);\n      });\n      setEntities(newEntities);\n    }, function (error) {\n      console.log(error);\n    });\n  }, []);\n\n  var onAddButtonPress = function onAddButtonPress() {\n    if (entityText && entityText.length > 0) {\n      var timestamp = firebase.firestore.FieldValue.serverTimestamp();\n      var data = {\n        text: entityText,\n        authorID: userID,\n        createdAt: timestamp\n      };\n      entityRef.add(data).then(function (_doc) {\n        setEntityText('');\n        Keyboard.dismiss();\n      }).catch(function (error) {\n        alert(error);\n      });\n    }\n  };\n\n  var renderEntity = function renderEntity(_ref) {\n    var item = _ref.item,\n        index = _ref.index;\n    return React.createElement(View, {\n      style: styles.entityContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 13\n      }\n    }, React.createElement(Text, {\n      style: styles.entityText,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }\n    }, index, \". \", item.text));\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.formContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: \"Add new entity\",\n    placeholderTextColor: \"#aaaaaa\",\n    onChangeText: function onChangeText(text) {\n      return setEntityText(text);\n    },\n    value: entityText,\n    underlineColorAndroid: \"transparent\",\n    autoCapitalize: \"none\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: onAddButtonPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 21\n    }\n  }, \"Add\"))), entities && React.createElement(View, {\n    style: styles.listContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 17\n    }\n  }, React.createElement(FlatList, {\n    data: entities,\n    renderItem: renderEntity,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    removeClippedSubviews: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  })));\n}","map":{"version":3,"sources":["/Users/andrewzhang/Desktop/berkeley/fintech/sports-betting/frontend/src/screens/HomeScreen/HomeScreen.js"],"names":["React","useEffect","useState","styles","firebase","HomeScreen","props","entityText","setEntityText","entities","setEntities","entityRef","firestore","collection","userID","extraData","id","where","orderBy","onSnapshot","querySnapshot","newEntities","forEach","doc","entity","data","push","error","console","log","onAddButtonPress","length","timestamp","FieldValue","serverTimestamp","text","authorID","createdAt","add","then","_doc","Keyboard","dismiss","catch","alert","renderEntity","item","index","entityContainer","container","formContainer","input","button","buttonText","listContainer"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { FlatList, Keyboard, Text, TextInput, TouchableOpacity, View } from 'react-native'\nimport styles from './styles';\nimport { firebase } from '../../firebase/config'\n\nexport default function HomeScreen(props) {\n\n    const [entityText, setEntityText] = useState('')\n    const [entities, setEntities] = useState([])\n\n    const entityRef = firebase.firestore().collection('entities')\n    const userID = props.extraData.id\n\n    useEffect(() => {\n        entityRef\n            .where(\"authorID\", \"==\", userID)\n            .orderBy('createdAt', 'desc')\n            .onSnapshot(\n                querySnapshot => {\n                    const newEntities = []\n                    querySnapshot.forEach(doc => {\n                        const entity = doc.data()\n                        entity.id = doc.id\n                        newEntities.push(entity)\n                    });\n                    setEntities(newEntities)\n                },\n                error => {\n                    console.log(error)\n                }\n            )\n    }, [])\n\n    const onAddButtonPress = () => {\n        if (entityText && entityText.length > 0) {\n            const timestamp = firebase.firestore.FieldValue.serverTimestamp();\n            const data = {\n                text: entityText,\n                authorID: userID,\n                createdAt: timestamp,\n            };\n            entityRef\n                .add(data)\n                .then(_doc => {\n                    setEntityText('')\n                    Keyboard.dismiss()\n                })\n                .catch((error) => {\n                    alert(error)\n                });\n        }\n    }\n\n    const renderEntity = ({item, index}) => {\n        return (\n            <View style={styles.entityContainer}>\n                <Text style={styles.entityText}>\n                    {index}. {item.text}\n                </Text>\n            </View>\n        )\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.formContainer}>\n                <TextInput\n                    style={styles.input}\n                    placeholder='Add new entity'\n                    placeholderTextColor=\"#aaaaaa\"\n                    onChangeText={(text) => setEntityText(text)}\n                    value={entityText}\n                    underlineColorAndroid=\"transparent\"\n                    autoCapitalize=\"none\"\n                />\n                <TouchableOpacity style={styles.button} onPress={onAddButtonPress}>\n                    <Text style={styles.buttonText}>Add</Text>\n                </TouchableOpacity>\n            </View>\n            { entities && (\n                <View style={styles.listContainer}>\n                    <FlatList\n                        data={entities}\n                        renderItem={renderEntity}\n                        keyExtractor={(item) => item.id}\n                        removeClippedSubviews={true}\n                    />\n                </View>\n            )}\n        </View>\n    )\n}"]},"metadata":{},"sourceType":"module"}