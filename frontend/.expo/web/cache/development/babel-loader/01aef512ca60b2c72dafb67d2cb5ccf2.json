{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/andrewzhang/Desktop/berkeley/fintech/sports-betting/frontend/App.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport { GoogleSignin, GoogleSigninButton, statusCodes } from 'react-native-google-signin';\n\nfunction App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      loggedIn = _useState2[0],\n      setloggedIn = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userInfo = _useState4[0],\n      setuserInfo = _useState4[1];\n\n  _signIn = function _signIn() {\n    var _await$GoogleSignin$s, accessToken, idToken;\n\n    return _regeneratorRuntime.async(function _signIn$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(GoogleSignin.hasPlayServices());\n\n          case 3:\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(GoogleSignin.signIn());\n\n          case 5:\n            _await$GoogleSignin$s = _context.sent;\n            accessToken = _await$GoogleSignin$s.accessToken;\n            idToken = _await$GoogleSignin$s.idToken;\n            setloggedIn(true);\n            _context.next = 14;\n            break;\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](0);\n\n            if (_context.t0.code === statusCodes.SIGN_IN_CANCELLED) {\n              alert('Cancel');\n            } else if (_context.t0.code === statusCodes.IN_PROGRESS) {\n              alert('Signin in progress');\n            } else if (_context.t0.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {\n              alert('PLAY_SERVICES_NOT_AVAILABLE');\n            } else {}\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 11]], Promise);\n  };\n\n  useEffect(function () {\n    GoogleSignin.configure({\n      scopes: ['email'],\n      webClientId: '418977770929-g9ou7r9eva1u78a3anassxxxxxxx.apps.googleusercontent.com',\n      offlineAccess: true\n    });\n  }, []);\n  if (initializing) return null;\n\n  if (!user) {\n    return React.createElement(View, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }\n    }, \"Login\"));\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Welcome \", user.email));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/andrewzhang/Desktop/berkeley/fintech/sports-betting/frontend/App.js"],"names":["React","useState","useEffect","GoogleSignin","GoogleSigninButton","statusCodes","App","loggedIn","setloggedIn","userInfo","setuserInfo","_signIn","hasPlayServices","signIn","accessToken","idToken","code","SIGN_IN_CANCELLED","alert","IN_PROGRESS","PLAY_SERVICES_NOT_AVAILABLE","configure","scopes","webClientId","offlineAccess","initializing","user","email"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SACAC,YADA,EAEAC,kBAFA,EAGAC,WAHA,QAIO,4BAJP;;AAMA,SAASC,GAAT,GAAe;AAAA,kBAEmBL,QAAQ,CAAC,KAAD,CAF3B;AAAA;AAAA,MAENM,QAFM;AAAA,MAEIC,WAFJ;;AAAA,mBAGmBP,QAAQ,CAAC,EAAD,CAH3B;AAAA;AAAA,MAGNQ,QAHM;AAAA,MAGIC,WAHJ;;AAKbC,EAAAA,OAAO,GAAG;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEAR,YAAY,CAACS,eAAb,EAFA;;AAAA;AAAA;AAAA,6CAG+BT,YAAY,CAACU,MAAb,EAH/B;;AAAA;AAAA;AAGCC,YAAAA,WAHD,yBAGCA,WAHD;AAGcC,YAAAA,OAHd,yBAGcA,OAHd;AAINP,YAAAA,WAAW,CAAC,IAAD,CAAX;AAJM;AAAA;;AAAA;AAAA;AAAA;;AAMN,gBAAI,YAAMQ,IAAN,KAAeX,WAAW,CAACY,iBAA/B,EAAkD;AAEhDC,cAAAA,KAAK,CAAC,QAAD,CAAL;AACD,aAHD,MAGO,IAAI,YAAMF,IAAN,KAAeX,WAAW,CAACc,WAA/B,EAA4C;AACjDD,cAAAA,KAAK,CAAC,oBAAD,CAAL;AAED,aAHM,MAGA,IAAI,YAAMF,IAAN,KAAeX,WAAW,CAACe,2BAA/B,EAA4D;AACjEF,cAAAA,KAAK,CAAC,6BAAD,CAAL;AAED,aAHM,MAGA,CAEN;;AAjBK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;;AAqBAhB,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,YAAY,CAACkB,SAAb,CAAuB;AACrBC,MAAAA,MAAM,EAAE,CAAC,OAAD,CADa;AAErBC,MAAAA,WAAW,EACT,sEAHmB;AAIrBC,MAAAA,aAAa,EAAE;AAJM,KAAvB;AAMD,GAPQ,EAON,EAPM,CAAT;AASA,MAAIC,YAAJ,EAAkB,OAAO,IAAP;;AAElB,MAAI,CAACC,IAAL,EAAW;AACT,WACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,CADF;AAKD;;AAED,SACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAeA,IAAI,CAACC,KAApB,CADF,CADF;AAKD;;AAGD,eAAerB,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport {\nGoogleSignin,\nGoogleSigninButton,\nstatusCodes,\n} from 'react-native-google-signin';\n\nfunction App() {\n  // Set an initializing state whilst Firebase connects\n  const [loggedIn, setloggedIn] = useState(false);\n  const [userInfo, setuserInfo] = useState([]);\n\n  _signIn = async () => {\n    try {\n      await GoogleSignin.hasPlayServices();\n      const {accessToken, idToken} = await GoogleSignin.signIn();\n      setloggedIn(true);\n    } catch (error) {\n      if (error.code === statusCodes.SIGN_IN_CANCELLED) {\n        // user cancelled the login flow\n        alert('Cancel');\n      } else if (error.code === statusCodes.IN_PROGRESS) {\n        alert('Signin in progress');\n        // operation (f.e. sign in) is in progress already\n      } else if (error.code === statusCodes.PLAY_SERVICES_NOT_AVAILABLE) {\n        alert('PLAY_SERVICES_NOT_AVAILABLE');\n        // play services not available or outdated\n      } else {\n        // some other error happened\n      }\n    }\n  };\n\n  useEffect(() => {\n    GoogleSignin.configure({\n      scopes: ['email'], // what API you want to access on behalf of the user, default is email and profile\n      webClientId:\n        '418977770929-g9ou7r9eva1u78a3anassxxxxxxx.apps.googleusercontent.com', // client ID of type WEB for your server (needed to verify user ID and offline access)\n      offlineAccess: true, // if you want to access Google API on behalf of the user FROM YOUR SERVER\n    });\n  }, []);\n\n  if (initializing) return null;\n\n  if (!user) {\n    return (\n      <View>\n        <Text>Login</Text>\n      </View>\n    );\n  }\n\n  return (\n    <View>\n      <Text>Welcome {user.email}</Text>\n    </View>\n  );\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}